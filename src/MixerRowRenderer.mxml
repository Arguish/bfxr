<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				xmlns:s="library://ns.adobe.com/flex/spark"
				
				 contentBackgroundColor="#CCBDA1" height="74" width="340"
				 
				  symbolColor="#CCBDA1">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			
			import spark.components.List;
			import spark.skins.spark.CheckBoxSkin;
			
			private function updateFields():void {
		
			}
			
			private function SliderValueChange(event:Event):void
			{
				/*
				var app:sfxr_interface = this.parentApplication as sfxr_interface;
				app.sliderChanged(event);
				*/
			}
			
			
			private function OnLockButtonChanged(event:Event):void
			{
				/*
				var app:sfxr_interface = this.parentApplication as sfxr_interface;
				app.lockChanged(data.tag,  locked.selected);
				*/
			}
			
			private function PlayClick():void
			{
				if (dropdown.selectedIndex>=0)
				{
					data.synth.play();
				}
			}
			private function removeItem(event:Event):void
			{
				var list:List = this.owner as List;
				list.dataProvider.removeItemAt(list.selectedIndex);
//				
//				var app:sfxr_interface = parentApplication as sfxr_interface;
//				app.RemoveFromSoundList(list.selectedIndex);
			}
			
			private function CreationComplete(event:Event):void
			{
				var app:sfxr_interface = this.parentApplication as sfxr_interface;
				dropdown.dataProvider=app.items;
				this.data.synth = new SfxrSynth();
				
				/*
				slider.minimum= Number(data.min);
				slider.maximum= Number(data.max);			
				
				var app:sfxr_interface = this.parentApplication as sfxr_interface;
				app.RegisterParameterSlider(this);
				app.RegisterLockableParam(data.tag,this.locked);
				(slider.skin as TickedHSliderSkin).track.skin.invalidateDisplayList();
				
				if (data.square==true)
				{
					app.RegisterSquareSlider(fieldlabel, slider);
				}
				*/
				
			}
			
			private function LabelClick():void
			{			
				/*
				var app:sfxr_interface = this.parentApplication as sfxr_interface;
				app.ResetParameterValue(data.tag);
				*/
			}
				
			
			private function DropdownChange(event:Event):void
			{
				var app:sfxr_interface = this.parentApplication as sfxr_interface;
				
				var row:Object = dropdown.dataProvider.getItemAt(dropdown.selectedIndex);
				
				data.synth.params.setSettingsString(row.data);
				
				var synth:SfxrSynth = data.synth;
				
				synth.addEventListener(SfxrSynth.CACHED,OnSynthCached);
				
				data.cached=false;
				cachingtext.visible=true;
				data.synthset=true;
				
				if (app.playonchange.selected)
				{
					synth.play();
				}
				else
				{
					synth.cacheSound(function():void{})
				}
			}
			
			private function Deselect():void
			{
				data.synthset=false;
				data.cached=false;			
			}
			
			private function OnSynthCached(event:Event):void
			{
				data.cached=true;
				this.cachingtext.visible=false;
			}
			
			private function SynthRefresh():void
			{
				var synth:SfxrSynth = data.synth;
				if (!synth.Dirty())
					return; // dont' need to do anything
				
				//otherwise, need to cache
				
				data.cached=false;
				this.cachingtext.visible=true;		
				
				var app:sfxr_interface = this.parentApplication as sfxr_interface;
				if (app.playonchange.selected)
				{
					synth.play();
				}
				else
				{
					synth.cacheSound(function():void{})
				}				
			}
			
			private function volumechanged():void
			{
				data.amplitudemodifier=volumeslider.value;
				var app:sfxr_interface = this.parentApplication as sfxr_interface;
				if (app.playonchange)
				{
					app.DoPlay();
				}
			}
			
			private function onsetchanged():void
			{
				data.onset=onsetslider.value;		
				var app:sfxr_interface = this.parentApplication as sfxr_interface;
				if (app.playonchange)
				{
					app.DoPlay();
				}
			}
		]]>
	</fx:Script>
	
	<s:Rect top="0" verticalCenter="0" bottom="0" left="0" horizontalCenter="0" right="0">
		<s:fill><s:SolidColor color="{ ((data.bggroup=='0') ? 0xffccbda1 : 0xffe7d1a7)  }" /></s:fill>	
	</s:Rect>
	<s:Rect top="-1" bottom="-1" left="-1" right="-1">
		<s:stroke>
			<mx:SolidColorStroke color="0"/>
		</s:stroke>		
	</s:Rect>
	<s:HGroup 
		verticalCenter="91" 
		left="73" 
		right="-66" 
		top="93" 
		bottom="-90" 
		verticalAlign="top"
		  creationComplete="CreationComplete(event)"
		>    

	</s:HGroup>
	
	<s:Button id="removeBtn"
			  width="30"
			  label="X"		
			  visible="true"
			  right="1"
			  top="2"
			  click="removeItem(event)"
			  toolTip="Remove item from list"
			  />
	
	<s:VSlider x="150" y="10" height="54" minimum="0" value="0" maximum="2" id="onsetslider" changeEnd="onsetchanged()" stepSize=".01"/>
	<s:VSlider x="169" y="10" height="54" id="volumeslider" value="1" minimum="0" maximum="2" changeEnd="volumechanged()" stepSize=".01"/>
	<s:DropDownList id="dropdown" x="14" y="10" change="DropdownChange(event)"></s:DropDownList>
	<s:Button x="14" y="43" label="Play" click="PlayClick()"/>
	<s:Label x="207" y="10" text="Caching" id="cachingtext" width="94" height="54" verticalAlign="middle" visible="false"/>
</s:ItemRenderer>